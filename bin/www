#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tdbservices:server');
var http = require('http');

var colors = require('colors');
colors.setTheme({
  silly: 'rainbow',
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'green',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red'
});

var mongoose = require('bluebird').promisifyAll(require('mongoose'));
mongoose = require('../configs/nosql.config');

console.log(`

888        888 888                                         d8b                           
888        888 888                                         Y8P                           
888        888 888                                                                       
888888 .d88888 88888b.  .d8888b   .d88b.  888d888 888  888 888  .d8888b .d88b.  .d8888b  
888   d88" 888 888 "88b 88K      d8P  Y8b 888P"   888  888 888 d88P"   d8P  Y8b 88K      
888   888  888 888  888 "Y8888b. 88888888 888     Y88  88P 888 888     88888888 "Y8888b. 
Y88b. Y88b 888 888 d88P      X88 Y8b.     888      Y8bd8P  888 Y88b.   Y8b.          X88 
 "Y888 "Y88888 88888P"   88888P'  "Y8888  888       Y88P   888  "Y8888P "Y8888   88888P'                                                                                        
`.verbose);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3636');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log(`listening on port ${port}`.inverse);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}